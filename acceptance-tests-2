#!/bin/bash

set -x

CABAL=cabal
if [ -n "$CABALVER" ]; then
	CABAL="${CABAL}-$CABALVER"
fi

TOP_DST="tmp"
ACCEPT_DST="$TOP_DST/acceptance_install"
REPO_DST="$TOP_DST/acceptance_repo"

function make_install_dir() {
	local dst="$ACCEPT_DST"
	rm -rf "${dst}"
	mkdir -p "${dst}"
	pushd "${dst}" > /dev/null
	pwd
	popd > /dev/null
}

function setup() {
	teardown

	$CABAL install --prefix="$ACCEPT_DST"
	cabal install --prefix="$ACCEPT_DST"
	PATH="$ACCEPT_DST/bin:${PATH}"

	git clone https://github.com/anchor/git-vogue-acceptance.git $REPO_DST
}

function teardown() {
	rm -rf $TOP_DST
}

function fail() { 
	echo "$@"
	exit 1
}

setup

# This should pass hlint, due to lack of Haskell files, 
# but will not pass check or stylish.

echo "Running cabal-malformed"

pushd $REPO_DST/cabal-malformed/
pwd

git init .
git vogue init

OUT=$(git -c user.email="a" -c user.name="b" commit 2>&1)
if [[ $? == 0 ]]; then
    fail "Succeeded when failure expected"
fi

if [[ ! ${OUT} =~ .*"cabal failed with".* ]]; then
	fail "cabal did not fail"
fi

if [[ ! ${OUT} =~ .*"hlint succeeded with".* ]]; then
	fail "hlint did not succeed"
fi

if [[ ! ${OUT} =~ .*"Stylish Haskell failed with".* ]]; then
	fail "stylish haskell failed with"
fi

popd > /dev/null

# This will pass check and stylish, but will fail on hlint
# due to lack of optimisation.

echo "Running hlint-noopt"

pushd $REPO_DST/hlint-noopt/
pwd

git init .
git vogue init

OUT=$(git -c user.email="a" -c user.name="b" commit 2>&1)
if [[ $? == 0 ]]; then
    fail "Succeeded when failure expected"
fi

if [[ ! ${OUT} =~ .*"cabal succeeded with".* ]]; then
	fail "cabal did not succeed"
fi

if [[ ! ${OUT} =~ .*"hlint failed with".* ]]; then
	fail "hlint did not fail"
fi

# @TODO: Fix test so stylish succeeds.
if [[ ! ${OUT} =~ .*"Stylish Haskell failed with".* ]]; then
	fail "stylish haskell did not fail"
fi

popd > /dev/null

# This should pass hlint, due to lack of Haskell files,
# but will not pass check or stylish.

echo "Running stylish-unstylish"

pushd $REPO_DST/stylish-unstylish/
pwd

git init .
git vogue init

OUT=$(git -c user.email="a" -c user.name="b" commit 2>&1)
if [[ $? == 0 ]]; then
    fail "Succeeded when failure expected"
fi

if [[ ! ${OUT} =~ .*"cabal succeeded with".* ]]; then
	fail "cabal did not succeed"
fi

if [[ ! ${OUT} =~ .*"hlint succeeded with".* ]]; then
	fail "hlint did not succeed"
fi

if [[ ! ${OUT} =~ .*"Stylish Haskell failed with".* ]]; then
	fail "stylish haskell did not fail"
fi

popd > /dev/null

# This should pass all checks.

echo "Running good-example"

pushd $REPO_DST/good-example/
pwd

git init .
git vogue init

OUT=$(git -c user.email="a" -c user.name="b" commit 2>&1)
if [[ $? != 0 ]]; then
    fail "Failed when success expected"
fi

if [[ ! ${OUT} =~ .*"cabal succeeded with".* ]]; then
	fail "cabal did not succeed"
fi

if [[ ! ${OUT} =~ .*"hlint succeeded with".* ]]; then
	fail "hlint did not succeed"
fi

if [[ ! ${OUT} =~ .*"Stylish Haskell succeeded with".* ]]; then
	fail "stylish haskell did not succeed"
fi

popd > /dev/null

# All tests have finished

teardown
